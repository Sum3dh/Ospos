{"version":3,"sources":["chartist-plugin-barlabels.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","getHighValue","chart","options","horizontalBars","axisX","high","axisY","data","series","length","constructor","Array","reduce","prev","curr","concat","Math","max","apply","getThresholdClass","percentage","val","aboveLabelClass","belowLabelClass","handleLabelPosition","lblPositionFnc","highValue","barValue","thresholdPercentage","positionData","value","threshold","result","labelOffset","x","y","textAnchor","window","document","Chartist","defaultOptionsBase","labelClass","labelInterpolationFnc","noop","labelPositionFnc","undefined","showZeroLabels","includeIndexClass","thresholdOptions","defaultOptionsHorizontalBars","defaultOptionsVerticalBars","plugins","ctBarLabels","Bar","extend","on","type","indexClass","seriesIndex","index","join","thresholdClass","group","elem","startAtBase","x1","x2","y1","y2","style","text","InsetLabelsPositionHorizontal","aboveThreshold"],"mappings":"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","file":"chartist-plugin-barlabels.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.ctBarLabels'] = factory();\n  }\n}(this, function () {\n\n  (function(root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n      // AMD. Register as an anonymous module.\r\n      define([], function() {\r\n        return (root.returnExportsGlobal = factory());\r\n      });\r\n    } else if (typeof exports === 'object') {\r\n      // Node. Does not work with strict CommonJS, but\r\n      // only CommonJS-like enviroments that support module.exports,\r\n      // like Node.\r\n      module.exports = factory();\r\n    } else {\r\n      root['Chartist.plugins.ctBarLabels'] = factory();\r\n    }\r\n  }(this, function() {\r\n\r\n    /**\r\n     * Chartist.js plugin to display a data label on a bar in a bar chart.\r\n     */\r\n    /* global Chartist */\r\n    (function(window, document, Chartist) {\r\n      'use strict';\r\n\r\n      var defaultOptionsBase = {\r\n        labelClass: 'ct-label',\r\n        labelInterpolationFnc: Chartist.noop,\r\n        labelPositionFnc: undefined,\r\n        showZeroLabels: false,\r\n        includeIndexClass: false,\r\n        thresholdPercentage: 30,\r\n        thresholdOptions: {\r\n          belowLabelClass: 'ct-label-below',\r\n          aboveLabelClass: 'ct-label-above'\r\n        }\r\n      };\r\n\r\n      var defaultOptionsHorizontalBars = {\r\n        labelOffset: {\r\n          x: 2,\r\n          y: 4\r\n        },\r\n        textAnchor: 'start'\r\n      }\r\n\r\n      var defaultOptionsVerticalBars = {\r\n        labelOffset: {\r\n          x: 0,\r\n          y: -2\r\n        },\r\n        textAnchor: 'middle'\r\n      }\r\n\r\n      Chartist.plugins = Chartist.plugins || {};\r\n      Chartist.plugins.ctBarLabels = function(options) {\r\n\r\n        return function ctBarLabels(chart) {\r\n          if (chart instanceof Chartist.Bar) {\r\n\r\n            options = Chartist.extend({}, defaultOptionsBase, options);\r\n            if (chart.options.horizontalBars) {\r\n              options = Chartist.extend({}, defaultOptionsHorizontalBars, options);\r\n            } else {\r\n              options = Chartist.extend({}, defaultOptionsVerticalBars, options);\r\n            }\r\n\r\n            var highValue = getHighValue(chart);\r\n\r\n            chart.on('draw', function(data) {\r\n              if (data.type === 'bar') {\r\n\r\n                // bar value is in a different spot depending on whether or not the chart is horizontalBars\r\n                var barValue = data.value.x === undefined ? data.value.y : data.value.x;\r\n                var indexClass = options.includeIndexClass ? ['ct-bar-label-i-', data.seriesIndex, '-', data.index].join('') : '';\r\n                var thresholdClass = getThresholdClass(options.thresholdPercentage, options.thresholdOptions, highValue, barValue);\r\n                var positionData = handleLabelPosition(options.labelPositionFnc, highValue, barValue, options.thresholdPercentage);\r\n                options = Chartist.extend({}, options, positionData);\r\n\r\n                if (options.showZeroLabels || (!options.showZeroLabels && barValue != 0)) {\r\n                  data.group.elem('text', {\r\n                    x: ((options.startAtBase &&  chart.options.horizontalBars) ? data.x1 : data.x2) + options.labelOffset.x,\r\n                    y: ((options.startAtBase && !chart.options.horizontalBars) ? data.y1 : data.y2) + options.labelOffset.y,\r\n                    style: 'text-anchor: ' + options.textAnchor\r\n                  }, [options.labelClass, indexClass, thresholdClass].join(' ')).text(options.labelInterpolationFnc(barValue));\r\n                }\r\n              }\r\n            });\r\n          }\r\n        };\r\n      };\r\n\r\n      Chartist.plugins.ctBarLabels.InsetLabelsPositionHorizontal = function(data) {\r\n\r\n        if (data.high && data.value && data.threshold) {\r\n          var aboveThreshold = (data.value / data.high * 100 > data.threshold);\r\n\r\n          if (aboveThreshold) {\r\n            return {\r\n              labelOffset: {\r\n                x: -2,\r\n                y: 4\r\n              },\r\n              textAnchor: 'end'\r\n            }\r\n          } else {\r\n            return {\r\n              labelOffset: {\r\n                x: 2,\r\n                y: 4\r\n              },\r\n              textAnchor: 'start'\r\n            };\r\n          }\r\n        }\r\n      };\r\n\r\n    }(window, document, Chartist));\r\n\r\n    return Chartist.plugins.ctBarLabels;\r\n\r\n    function getHighValue(chart) {\r\n\r\n      // respect the user provided options for the max value first\r\n      if (chart.options.horizontalBars && chart.options.axisX && chart.options.axisX.high) {\r\n        // the horizontal chart has a high on the X axis\r\n        return chart.options.axisX.high;\r\n      } else if (!chart.options.horizontalBars && chart.options.axisY && chart.options.axisY.high) {\r\n        // the vertical chart has a high on the Y axis\r\n        return chart.options.axisY.high;\r\n      } else if (chart.options.high) {\r\n        // the chart has a high set on its own options\r\n        return chart.options.high;\r\n      } else {\r\n        // the user did not set any high value, so we will need to calculate the max value\r\n        if (chart.data && chart.data.series && chart.data.series.length > 0) {\r\n          var series = chart.data.series;\r\n          // check to see if there are multiple series\r\n          if (series[0].constructor === Array) {\r\n            series = series.reduce(function(prev, curr) {\r\n              return prev.concat(curr)\r\n            });\r\n          }\r\n\r\n          // return the highest value\r\n          return Math.max.apply(null, series);\r\n        }\r\n      }\r\n    }\r\n\r\n    function getThresholdClass(percentage, options, high, val) {\r\n      if (percentage && options && high) {\r\n        return (val / high * 100 > percentage) ? options.aboveLabelClass : options.belowLabelClass;\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    function handleLabelPosition(lblPositionFnc, highValue, barValue, thresholdPercentage) {\r\n      if (!lblPositionFnc)\r\n        return {};\r\n\r\n      var positionData = lblPositionFnc({\r\n        high: highValue,\r\n        value: barValue,\r\n        threshold: thresholdPercentage\r\n      });\r\n\r\n      var result = {};\r\n      // sanitize the object just in case they tried to override other options that will get merged\r\n      // TODO: make this terse\r\n      if (positionData.labelOffset) {\r\n        result.labelOffset = positionData.labelOffset;\r\n\r\n        if (positionData.labelOffset.x)\r\n          result.labelOffset.x = positionData.labelOffset.x;\r\n\r\n        if (positionData.labelOffset.y)\r\n          result.labelOffset.y = positionData.labelOffset.y;\r\n      }\r\n      if (positionData.textAnchor)\r\n        result.textAnchor = positionData.textAnchor;\r\n\r\n      return result;\r\n    }\r\n\r\n  }));\r\n\n  return Chartist.plugins.ctBarLabels;\n\n}));\n"]}